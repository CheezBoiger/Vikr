//
// Copyright (c) Mario Garcia, Under the MIT License.
//
#ifndef __VIKR_FRAMEBUFFER_HPP
#define __VIKR_FRAMEBUFFER_HPP

#include <platform/vikr_types.hpp>
#include <glm/glm.hpp>

#include <list>

namespace vikr {


class Texture;


/**
  Framebuffer abstract. Used to be derived specifically for our Renderers.

  OpenGL: Associates GLFramebuffer
  Vulkan: Associates VKFramebuffer
*/
class Framebuffer {
public:

  Framebuffer();
  Framebuffer(vuint32 width, vuint32 height);

  vvoid SetStencilDepth(vbool stencil_depth) { m_depth_and_stencil = stencil_depth; }
  /** 
    Generate the Framebuffer with this function call.
  */
  virtual vvoid Generate() = 0;  
  /**
    Get the width of our Framebuffer texture scheme.
  */
  vuint32 GetWidth() { return m_width; }
  /**
    Get the height of out Framebuffer texture scheme. 
  */
  vuint32 GetHeight() { return m_height; }
  /**
    Set the clear color of the Framebuffer. 
  */
  vvoid SetClearColor(glm::vec3 color) { m_clearcolor = color; }
  /**
    Get the clear color of the Framebuffer. 
  */
  glm::vec3 GetClearColor() { return m_clearcolor; }
  /**
    Get the Framebuffer id.
  */
  vuint32 GetId() { return m_fbo; }


protected:
  /**
    Primary texture object associated with this Framebuffer. 
  */
  std::unique_ptr<Texture> m_texture;
  /**
    Other texture object generated by the frame buffer.
  */
  std::list<std::unique_ptr<Texture> > m_textures;
  /**
    The Framebuffer object id.
  */
  vuint32 m_fbo;
  /**
    Associated Renderbuffer object id. 
  */
  vuint32 m_rbo;
  /**
    Get the clear color for this framebuffer.
  */
  glm::vec3 m_clearcolor;
  vuint32 m_width;
  vuint32 m_height;
  vbool m_depth_and_stencil;
};
} // vikr
#endif // __VIKR_FRAMEBUFFER_HPP